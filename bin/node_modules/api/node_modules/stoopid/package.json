{
  "author": {
    "name": "Mikeal Rogers",
    "email": "mikeal.rogers@gmail.com",
    "url": "http://www.mikealrogers.com"
  },
  "name": "stoopid",
  "description": "Loggers are stupid and I'm resentful that I had to write this.",
  "version": "0.2.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/mikeal/stoopid.git"
  },
  "main": "index.js",
  "dependencies": {
    "colors": "*"
  },
  "devDependencies": {},
  "readme": "# stoopid -- Loggers are stupid and I'm resentful that I had to write this.\n\n## Install\n\n<pre>\n  npm install stoopid\n</pre>\n\nOr from source:\n\n<pre>\n  git clone git://github.com/mikeal/stoopid.git \n  cd stoopid\n  npm link\n</pre>\n\n## Usage\n\n```javascript\nstoopid.log('I am a robot', {prop:'value'})\n```\n\nThe stoopid module exports itself as an instance of `Logger` with the namespace `\"process\"`.\n\nYou can create child logger objects with new namespaces with the `.logger(name)` method.\n\n```\nvar logger = require('stoopid').logger('myModuleName')\n```\n\nA logger object supports all the same methods that the `console` object in node supports and has a nearly identical API. It also supports all the methods necessary to be enabled as a logger in `socket.io`.\n\nconsole logging is enabled by default.\n\n## Logger(name)\n\nBase logger object.\n\n### stoopid API\n\n* Logger.logger(name) - Create a new instance of logger with this logger as it's parent.\n* Logger.addHandler(handler, options) - Add a handler, `\"console\"` and `\"file\"` are supported.\n* Logger.silly(arg1, arg2, ...) - Logs at level `\"silly\"` or `10` \n* Logger.verbose(arg1, arg2, ...): - Logs at level `\"verbose\"` or `100`\n* Logger.debug(arg1, arg2, ...): - Logs at level `\"info\"` or `200`\n* Logger.info(arg1, arg2, ...): - Logs at level `\"info\"` or `300`\n* Logger.warn(arg1, arg2, ...): - Logs at level `\"warn\"` or `400`\n* Logger.error(arg1, arg2, ...): - Logs at level `\"error\"` or `500`\n\n### console API\n\nAll the additional methods necessary to be used as a replacement for node.js' global console object are also supported.\n\n* Logger.log(arg1, arg2, ...) - Logs at level `\"info\"` or `300`.\n* Logger.dir(arg1, arg2, ...) - Logs at level `\"info\"` or `300`.\n* Logger.time(label) - Mark a timer. http://nodejs.org/api/stdio.html#console.time\n* Logger.timeEnd(label) - Finish timer, record output. http://nodejs.org/api/stdio.html#console.timeEnd\n* Logger.trace(label) - Log at `\"error\"` level a stack trace to stderr in the current position. http://nodejs.org/api/stdio.html#console.trace\n* Logger.assert(expression) - http://nodejs.org/api/stdio.html#console.assert\n\n\n",
  "readmeFilename": "README.mkd",
  "bugs": {
    "url": "https://github.com/mikeal/stoopid/issues"
  },
  "homepage": "https://github.com/mikeal/stoopid",
  "_id": "stoopid@0.2.1",
  "_shasum": "aa2b485d4f4891f232cec69acda1836d5b0d1562",
  "_from": "stoopid@>=0.0.0",
  "_resolved": "http://registry.npmjs.org/stoopid/-/stoopid-0.2.1.tgz"
}
