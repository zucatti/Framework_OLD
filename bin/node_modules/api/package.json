{
  "author": {
    "name": "Paul Vorbach",
    "email": "paul@vorb.de",
    "url": "https://vorb.de/"
  },
  "name": "api",
  "description": "A server framework for easy routing",
  "tags": [
    "server",
    "middleware",
    "router"
  ],
  "version": "0.3.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/pvorb/node-api.git"
  },
  "bugs": {
    "url": "https://github.com/pvorb/node-api/issues"
  },
  "main": "./api.js",
  "bin": {
    "api": "./bin/api.js"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "dependencies": {
    "confdir": ">=0.0.2",
    "ejs": ">=0.6.1",
    "stoopid": ">=0.0.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://vorb.de/license/mit.html"
    }
  ],
  "devDependencies": {},
  "optionalDependencies": {},
  "readme": "api\n===\n\nis a module for easily providing several pluggable RESTful APIs and other\ndynamic content on a single server. It extends\n[`http.Server`](http://nodejs.org/api/http.html#http_class_http_server).\n\nInstallation\n------------\n\n`npm install -g api`\n\nUsage\n-----\n\napi comes with an executable. If you run `api` from your console, the script\nwalks up the path of your current working directory and looks for a directory\nnamed `.conf` that contains a file named `api.json`. This file must contain\nseveral values. Here's an annotated version of such a file.\n\n``` javascript\n{\n  \"protocol\": \"http\",               // \"http\" or \"https\"\n  \"connection\": {                   // host and port of that server\n    \"hostname\": \"localhost\",\n    \"port\": 1337\n  },\n  \"directories\": {\n    \"modules\": \".conf/modules\"      // directory that contains submodules\n  },\n  \"modules\": [\n    \"example\"                       // modules that are loaded on startup\n  ],\n  \"errorPages\": {                   // error pages\n    \"404\": \".conf/error/404.html\",\n    \"500\": \".conf/error/500.html\"\n  },\n  \"logFile\": \".conf/api.log\"        // the log file\n}\n```\n\nJust copy & paste this file to `.conf/api.json`, if you want to use it, but\ndon’t forget to remove the comments. JSON files are not allowed to contain\ncomments for some reason.\n\nThis example configuration starts a server at `http://localhost:1337`. It also\ndefines `.conf/module` as the directory for submodules and registers one module\n\"example\". To add code for that module, you have to create the file\n`.conf/modules/example.js`. A module must export a single function\n(`function (app, logger, conf, globalConf, started)`).\n\n  * `app` is a reference of the Server object.\n  * `logger` is a [stoopid][] logger.\n  * `conf` is a module specific configuration object.\n  * `globalConf` is the global configuration object from `.conf/api.json`.\n  * `started` is a callback (`function (err)`), that is used to return errors\n    or let _api_ know, that the module has been started.\n\n[stoopid]: https://github.com/mikeal/stoopid\n\n\n`.conf/modules/example.js`:\n\n``` javascript\nmodule.exports = function example(app, logger, conf, globalConf, started) {\n  // register request listeners\n  app.get('^/hello-world.html', function helloWorld(req, resp) {\n    logger.info('Somebody visited \"/hello-world.html\".');\n    resp.writeHead(200, { 'Content-Type': 'text/html' });\n    resp.end('<b>Hello World!</b>');\n  });\n\n  started(); // send the callback after everything has been set up.\n}\n```\n\nYou can try the example by starting `api` from the console. You should see the\nfollowing output on `stdout`:\n\n    [process] - Server up and running.\n    [process] - Starting module \"example\".\n    [process] - Module \"example\" up and running.\n\nNow you can visit `http://localhost:1337/hello-world.html` and you should see\n\n**Hello World!**\n\nas well as\n\n    [process] - Somebody visited \"/hello-world.html\"\n\nAPI\n---\n\nThe api `Server` object has all the methods of\n[`http.Server`](http://nodejs.org/api/http.html#http_class_http_server) (or\n`https.Server`, if you configured it with https). There are also some additional\nmethods, that are more or less shortcuts for common events:\n\n  * `on(path, callback)` handles any requests that match `path`, no matter which\n    http method is used.\n  * `get(path, callback)` handles all GET request that match `path`.\n  * `post(path, callback)` handles all POST requests that match `path`.\n  * `put(path, callback)` handles all PUT requests that match `path`.\n  * `delete(path, callback)` handles all DELETE requests that match `path`.\n  * `head(path, callback)` handles all HEAD requests that match `path`.\n\n`path` is a string representation of that `RegExp` object.\nSlashes (`/`) don’t need to be escaped.\n\n`callback` is a callback function (`function (req, resp)`) just like in the\n[http 'request' event](http://nodejs.org/api/http.html#http_event_request).\n\nBugs and Issues\n---------------\n\nIf you encounter any bugs or issues, feel free to open an issue at\n[github](//github.com/pvorb/node-api/issues) or send me an e-mail to\npaul(at)vorb.de.\n\nLicense\n-------\n\nCopyright © 2011-2012 Paul Vorbach\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the “Software”), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/pvorb/node-api",
  "_id": "api@0.3.1",
  "_shasum": "a77e2613efa74c2f4ad678864da2f58396db96d0",
  "_from": "api@",
  "_resolved": "http://registry.npmjs.org/api/-/api-0.3.1.tgz"
}
